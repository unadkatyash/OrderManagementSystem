@page
@using OrderManagementSystem.API.Models
@model OrderManagementSystem.API.Pages.Orders.IndexModel
@{
    ViewData["Title"] = "Orders";
    Layout = "_Layout";
}
        <div class="row" id="orders-container">
            @if (Model.Orders?.Any() == true)
            {
                @foreach (var order in Model.Orders)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card order-card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Order #@order.Id</h6>
                                <span class="badge bg-@GetStatusColor(order.Status)">
                                    @order.Status
                                </span>
                            </div>
                            <div class="card-body">
                                <h6 class="card-title">@order.CustomerName</h6>
                                <p class="card-text text-muted">@order.CustomerEmail</p>
                                <p class="card-text">
                                    <strong>Amount:</strong> $@order.TotalAmount.ToString("F2")<br>
                                    <strong>Date:</strong> @order.OrderDate.ToString("MMM dd, yyyy")
                                </p>
                                @if (!string.IsNullOrEmpty(order.TrackingNumber))
                                {
                                    <p class="card-text">
                                        <strong>Tracking:</strong> @order.TrackingNumber
                                    </p>
                                }
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100" role="group">
                                    <a href="/Orders/Details/@order.Id" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-eye"></i> View
                                    </a>
                                    @if (order.Status == OrderStatus.Pending)
                                    {
                                        <button class="btn btn-sm btn-outline-success" onclick="updateStatus(@order.Id, 1)">
                                            <i class="fas fa-play"></i> Process
                                        </button>
                                    }
                                    @if (order.Status != OrderStatus.Delivered && order.Status != OrderStatus.Cancelled)
                                    {
                                        <button class="btn btn-sm btn-outline-danger" onclick="updateStatus(@order.Id, 5)">
                                            <i class="fas fa-times"></i> Cancel
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="text-center py-5">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No orders found</h4>
                        <p class="text-muted">Create your first order to get started</p>
                        <a href="/Orders/Create" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Create Order
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        async function updateStatus(orderId, status) {
            if (!confirm('Are you sure you want to update this order status?')) return;

            try {
                const response = await fetch(`/api/orders/${orderId}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(status)
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error updating order status');
                }
            } catch (error) {
                alert('Error updating order status');
            }
        }

        setInterval(() => {
            location.reload();
        }, 30000);
    </script>

@functions {
    private string GetStatusColor(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "warning",
            OrderStatus.Processing => "info",
            OrderStatus.Shipped => "success",
            OrderStatus.InTransit => "primary",
            OrderStatus.Delivered => "success",
            OrderStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
}
